// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  location       String
  starts_at      DateTime
  price          Decimal
  registrations  Registration[]
  // TODO: event creator
  user_id        String
  user           User             @relation(fields: [user_id], references: [id])
  likes          Like[]
  Categorization Categorization[]
}

model Registration {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
  user_id    String
  event_id   Int
  how_heard  String
  event      Event    @relation(fields: [event_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, event_id]) // user can only register once for an event
}

model Like {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  user_id    String
  event_id   Int
  event      Event    @relation(fields: [event_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@unique([user_id, event_id]) // user can only like once for an event
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id             String           @id @default(cuid())
  name           String           @unique
  categorization Categorization[]
}

// mapping table between Category and Event
// 1 event can have many categories
// 1 category can have many events
model Categorization {
  event_id    Int
  category_id String
  event       Event    @relation(fields: [event_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])

  @@unique([event_id, category_id])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  registrations Registration[]
  events        Event[]
  likes         Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
